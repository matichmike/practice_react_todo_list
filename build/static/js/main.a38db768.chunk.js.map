{"version":3,"sources":["components/AddDriverTask.jsx","helpers/yearBuilder.js","components/DriverSelector.jsx","components/WeekToggle.jsx","components/DriverTimetable.jsx","helpers/reportAccum.js","components/DriverScheduleCSV.jsx","App.js","serviceWorker.js","index.js"],"names":["buildWeek","days","i","push","hours","Array","buildYear","weeks","observer","viewModel","className","value","activeDriver","name","id","onChange","e","target","drivers","map","driver","key","onClick","activeWeek","getDriverDay","day","currentDriverTimeline","driverTimeline","getTaskByDayTime","hour","tasks","taskId","get","deleteTask","task","transaction","delete","rows","renderedTasks","columns","deleteBtn","_day","_task","type","description","style","width","AccumEntry","addDayRecord","count","records","closeDay","daysCount","this","Accum","period","types","addDayRecords","all","record","__addDayRecordInternal","entries","length","currentEntry","print","head","join","counter","entry","row","t","v","taskTypes","scheduleInput","React","useRef","ref","Number","parseInt","current","csvText","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","downloadReport","accum","driverYear","j","allTasks","Set","h","add","Map","taskType","set","size","from","forEach","dayRecords","x","createReport","hoursRangeSelect","singleHour","typeInput","locationInput","descriptionInput","daySelectInput","hourFromSelect","hourToSelect","required","placeholder","alert","location","to","driverDay","overlappedTasks","ot","window","confirm","uuid","newTask","has","toDelete","App","observable","John","Ben","Ken","DriverSelector","WeekToggle","DriverScheduleCSV","AddDriverTask","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8JAOA,I,mDCNMA,EAAY,WAEhB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAAI,IAAKA,EACvBD,EAAKE,KAAK,CACRC,MAAO,IAAIC,MAAM,MAGrB,OAAOJ,GAaMK,EAVG,WAEhB,IADA,IAAMC,EAAQ,GACLL,EAAI,EAAGA,EAAI,KAAMA,EACxBK,EAAMJ,KAAK,CACTF,KAAMD,MAGV,OAAOO,G,eCdMC,eAAS,YAAoB,IAAjBC,EAAgB,EAAhBA,UACzB,OACE,6BACI,8BACE,4BAAQC,UAAU,eAAeC,MAAOF,EAAUG,aAAcC,KAAK,UAAUC,GAAG,UAAUC,SAAU,SAACC,GACnG,IAAML,EAAQK,EAAEC,OAAON,MACvBF,EAAUG,aAAeD,IAEzBF,EAAUS,QAAQC,KAAI,SAACC,EAAQlB,GAAT,OAAe,4BAAQmB,IAAG,UAAKD,EAAL,YAAelB,GAAKS,MAAOS,GAASA,YCRnFZ,eAAS,YAAoB,IAAjBC,EAAgB,EAAhBA,UACzB,OACE,oCACE,4BAAQC,UAAU,kBAAkBY,QAAS,WACxCb,EAAUc,WAAW,GAGxBd,EAAUc,eAJZ,UAQA,2BAAOb,UAAU,eAAjB,QAAqCD,EAAUc,WAAY,GAC3D,4BAAQb,UAAU,kBAAkBY,QAAS,WACxCb,EAAUc,WAAW,IAGxBd,EAAUc,eAJZ,cCXOC,EAAe,SAACf,EAAWgB,GAAS,IACvCb,EAA6CH,EAA7CG,aAAcW,EAA+Bd,EAA/Bc,WAChBG,EAD+CjB,EAAnBkB,eACWf,GAC7C,GAAKc,EAGL,OAAOA,EAAsBH,GAAYtB,KAAKwB,IAG1CG,EAAmB,SAACnB,EAAWgB,EAAKI,GAAU,IAC1CC,EAAUrB,EAAVqB,MACFC,EAASP,EAAaf,EAAWgB,GAAKrB,MAAMyB,GAElD,OADaC,EAAME,IAAID,IAInBE,EAAa,SAACxB,EAAWgB,EAAKS,GAAU,IACpCpB,EAAeoB,EAAfpB,GAAIM,EAAWc,EAAXd,OACNhB,EAAQK,EAAUkB,eAAeP,GAAQX,EAAUc,YAAYtB,KAAKwB,GAAKrB,MAC/E+B,aAAY,WACV,IAAK,IAAIjC,EAAI,EAAGA,EAAI,KAAMA,EACpBE,EAAMF,KAAOY,IACfV,EAAMF,GAAK,MAGfO,EAAUqB,MAAMM,OAAOtB,OAIZN,eAAS,YAGtB,IAH0C,IAAjBC,EAAgB,EAAhBA,UACnB4B,EAAO,GACPC,EAAgB,GACbT,EAAO,EAAGA,EAAO,GAAIA,IAAQ,CAEpC,IADA,IAAMU,EAAU,CAAC,4BAAKV,EAAL,QACRJ,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAChC,IAAIS,EAAON,EAAiBnB,EAAWgB,EAAKI,GACxCW,EAAY,KACXF,EAAcJ,IAAQ,WACzB,IAAMO,EAAOhB,EACPiB,EAAQR,EACdI,EAAcJ,IAAQ,EACtBM,EAAY,4BAAQlB,QAAS,WAC3BW,EAAWxB,EAAWgC,EAAMC,KADlB,UAJa,GAQvBR,IACFA,EAAO,6BAAMA,EAAKS,KAAX,MAAoBT,EAAKU,YAAzB,IAAuCJ,IAGhDD,EAAQpC,KAAK,4BAAK+B,GAAQ,MAE5BG,EAAKlC,KAAK,4BACPoC,IAIL,OACE,6BACE,2BAAOM,MAAO,CAAEC,MAAO,SACrB,4BACE,6BACA,sCACA,uCACA,yCACA,wCACA,sCACA,wCACA,uCAEDT,O,cCzEHU,EAEF,aAAe,IAAD,gCAKdC,aAAe,SAACL,EAAMM,GACb,EAAKC,QAAQP,GAGd,EAAKO,QAAQP,IAASM,EAFtB,EAAKC,QAAQP,GAAQM,GAPf,KAadE,SAAW,WACP,EAAKC,aAbLC,KAAKH,QAAU,GACfG,KAAKD,UAAY,GAgBZE,EAET,WAAYC,EAAQC,GAAQ,IAAD,gCAM3BC,cAAgB,SAACC,GAAS,IAAD,gBACFA,GADE,IACrB,2BAAwB,CAAC,IAAhBC,EAAe,QACpB,EAAKC,uBAAuBD,EAAOhB,KAAMgB,EAAOV,QAF/B,8BAIrB,EAAKY,QAAQ,EAAKA,QAAQC,OAAS,GAAGX,YAVf,KAa3BS,uBAAyB,SAACjB,EAAMM,GAC5B,IAAIc,EACC,EAAKF,QAAQC,QAIdC,EAAe,EAAKF,QAAQ,EAAKA,QAAQC,OAAS,IACjCV,YAAc,EAAKG,SAChCQ,EAAe,IAAIhB,EACnB,EAAKc,QAAQ1D,KAAK4D,KANtBA,EAAe,IAAIhB,EACnB,EAAKc,QAAQ1D,KAAK4D,IAQtBA,EAAaf,aAAaL,EAAMM,IAzBT,KA4B3Be,MAAQ,WACJ,IAAM3B,EAAO,GACP4B,EAAI,qBAAiB,EAAKT,MAAMU,KAAK,MAC3C7B,EAAKlC,KAAK8D,GACV,IAJU,EAINE,EAAU,EAJJ,cAKQ,EAAKN,SALb,yBAKDO,EALC,QAMFC,EAAM,eAAQF,EAAU,EAAlB,cAAyBA,EAAU,EAAKZ,OAAxC,KAAoD,EAAKC,MAAMrC,KAAI,SAAAmD,GAAC,OAAIF,EAAMlB,QAAQoB,IAAM,KAAGnD,KAAI,SAAAoD,GAAC,MAAI,GAAIA,KAAGL,KAAK,KAC9H7B,EAAKlC,KAAKkE,GACVF,GAAW,EAAKZ,QAHpB,2BAAiC,IALvB,8BAWV,OADelB,EAAK6B,KAAK,OArCzBb,KAAKE,OAASA,EACdF,KAAKQ,QAAU,GACfR,KAAKG,MAAQA,GCtBfgB,EAAY,CAAC,UAAW,WAAY,SAoD3B,cAAoB,IAAjB/D,EAAgB,EAAhBA,UACVgE,EAAgBC,IAAMC,SAE5B,OACE,oCACE,4BAAQjE,UAAU,eAAekE,IAAKH,EAAe5D,KAAK,kBACxD,4BAAQF,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,YAEF,4BAAQD,UAAU,kBAAkBY,QAAS,WACzC,IAAMiC,EAASsB,OAAOC,SAASL,EAAcM,QAAQpE,QA5BxC,SAACqE,GAEtB,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmBL,IACnFC,EAAQG,aAAa,WAAY,cAEjCH,EAAQpC,MAAMyC,QAAU,OACxBJ,SAASK,KAAKC,YAAYP,GAE1BA,EAAQQ,QAERP,SAASK,KAAKG,YAAYT,GAmBlBU,CAjEW,SAAClF,EAAW8C,GAI/B,IAHA,IAAMqC,EAAQ,IAAItC,EAAMC,EAAQiB,GACxB5D,EAAwCH,EAAxCG,aAAce,EAA0BlB,EAA1BkB,eAAgBG,EAAUrB,EAAVqB,MAChC+D,EAAalE,EAAef,GACzBV,EAAI,EAAGA,EAAI,GAAIA,IAGtB,IAFA,IACQD,EADK4F,EAAW3F,GAChBD,KAFmB,WAGlB6F,GAGP,IANyB,IAIjB1F,EAAUH,EAAK6F,GAAf1F,MACJ2F,EAAW,IAAIC,IACVC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAM/D,EAAO9B,EAAM6F,GACf/D,GACF6D,EAASG,IAAIhE,GAGjB,IAZyB,EAYnBf,EAAM,IAAIgF,IAZS,cAaJ3B,GAbI,IAazB,2BAAgC,CAAC,IAAxB4B,EAAuB,QAC9BjF,EAAIkF,IAAID,EAAU,CAAEnD,MAAO,KAdJ,8BAiBrB8C,EAASO,OACXP,EAAW1F,MAAMkG,KAAKR,GAAU5E,KAAI,SAAAL,GAAE,OAAIgB,EAAME,IAAIlB,OAC3C0F,SAAQ,SAAAlC,GACfnD,EAAIa,IAAIsC,EAAE3B,MAAMM,WAIpB,IAAMwD,EAAapG,MAAMkG,KAAKpF,EAAI0C,WAAW1C,KAAI,SAAAuF,GAAC,MAAK,CAAE/D,KAAM+D,EAAE,GAAIzD,MAAOyD,EAAE,GAAGzD,UAC/E2C,EAAMnC,cAAcgD,IAtBfX,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAyBX,OAAOF,EAAM5B,QAgCU2C,CAAalG,EAAW8C,MAF3C,S,QN9DAqD,EAAmB,GAChBC,EAAa,EAAGA,EAAa,GAAIA,IACxCD,EAAiBzG,KAAK0G,GAGT,kBAAoB,IAAjBpG,EAAgB,EAAhBA,UAEVqG,EAAYpC,IAAMC,SAClBoC,EAAgBrC,IAAMC,SACtBqC,EAAmBtC,IAAMC,SACzBsC,EAAiBvC,IAAMC,SACvBuC,EAAiBxC,IAAMC,SACvBwC,EAAezC,IAAMC,SAE3B,OACE,oCACE,4BAAQyC,UAAQ,EAAC1G,UAAU,eAAekE,IAAKkC,EAAWjG,KAAK,aACzD,oDACA,4BAAQF,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,SAAd,UAEN,4BAAQyG,UAAQ,EAAC1G,UAAU,eAAekE,IAAKqC,EAAgBpG,KAAK,iBAC9D,8CACA,4BAAQF,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,YACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,YACA,4BAAQA,MAAM,KAAd,WAEN,4BAAQyG,UAAQ,EAAC1G,UAAU,eAAekE,IAAKsC,EAAgBrG,KAAK,aAC9D,wCACE+F,EAAiBzF,KAAI,SAACjB,GAAD,OAAO,oCAAUA,EAAV,YAEpC,4BAAQkH,UAAQ,EAAC1G,UAAU,eAAekE,IAAKuC,EAActG,KAAK,WAC5D,sCACE+F,EAAiBzF,KAAI,SAACjB,GAAD,OAAO,oCAAUA,EAAV,YAEpC,2BAAOkH,UAAQ,EAAC1G,UAAU,eAAekE,IAAKmC,EAAelG,KAAK,WAAW8B,KAAK,OAAO0E,YAAY,aACrG,2BAAOD,UAAQ,EAAC1G,UAAU,eAAekE,IAAKoC,EAAkBnG,KAAK,cAAc8B,KAAK,OAAO0E,YAAY,gBAC3G,4BAAQxE,MAAO,CAAEC,MAAO,WAAYpC,UAAU,kBAAkBY,QAAS,WACvE,IAAMqB,EAAOmE,EAAU/B,QAAQpE,MAC/B,IAAKgC,EACH,OAAO2E,MAAM,4BAEf,IAAMC,EAAWR,EAAchC,QAAQpE,MACjCiC,EAAcoE,EAAiBjC,QAAQpE,MACvCc,EAAMwF,EAAelC,QAAQpE,MAC7B4F,EAAO1B,OAAOC,SAASoC,EAAenC,QAAQpE,OAC9C6G,EAAK3C,OAAOC,SAASqC,EAAapC,QAAQpE,OAEhD,GAAI6G,EAAKjB,EACP,OAAOe,MAAM,uBAMf,IAHA,IAAMG,EAAYjG,EAAaf,EAAWgB,GAEpCiG,EAAkB,IAAI1B,IACnB9F,EAAIqG,EAAMrG,GAAKsH,EAAItH,IAAK,CAC/B,IAAMyH,EAAKF,EAAUrH,MAAMF,GACvByH,GACFD,EAAgBxB,IAAIyB,GAIxB,IAAID,EAAgBpB,MACbsB,OAAOC,QAAQ,gDADtB,CAMA,IAAM9F,EAAS+F,cACTC,EAAU,CACdjH,GAAIiB,EACJY,OACA4E,WACA3E,cACAxB,OAAQX,EAAUG,cAGpBuB,aAAY,WAGV,GAFA1B,EAAUqB,MAAMuE,IAAItE,EAAQgG,GAExBL,EAAgBpB,KAAM,CACxB,IAAK,IAAIpG,EAAI,EAAGA,EAAI,KAAMA,EAAG,CAC3B,IAAMoE,EAAImD,EAAUrH,MAAMF,GACtBwH,EAAgBM,IAAI1D,KACtBmD,EAAUrH,MAAMF,GAAK,MAEnBA,GAAKqG,GAAQrG,GAAKsH,IACpBC,EAAUrH,MAAMF,GAAK6B,GAIzB,IADA,IACA,MADgB1B,MAAMkG,KAAKmB,GAC3B,eAA8B,CAAzB,IAAIO,EAAQ,KACfxH,EAAUqB,MAAMM,OAAO6F,SAIzB,IAAK,IAAI/H,EAAIqG,EAAMrG,GAAKsH,EAAItH,IAC1BuH,EAAUrH,MAAMF,GAAK6B,QA5D7B,kBOMSmG,MA5Cf,WAAe,IAEIzH,EAAckE,iBAAOwD,YAAW,CAC/CjH,QAAS,CAAC,OAAQ,MAAO,OACzBY,MAAO,IAAIqE,IACXvF,aAAc,OACde,eAAgB,CACdyG,KAAM9H,IACN+H,IAAK/H,IACLgI,IAAKhI,KAEPiB,WAAY,KATNwD,QAYR,OACE,yBAAKrE,UAAU,QACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,mBACb,2BAAOA,UAAU,eAAjB,WACA,kBAAC6H,EAAD,CAAgB9H,UAAWA,KAE3B,yBAAKC,UAAU,eACb,kBAAC8H,EAAD,CAAY/H,UAAWA,KAGzB,yBAAKC,UAAU,qBACb,kBAAC+H,EAAD,CAAmBhI,UAAWA,MAIhC,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,kBAACgI,EAAD,CAAejI,UAAWA,KAE5B,yBAAKC,UAAU,SACb,kBAAC,EAAD,CAAiBD,UAAWA,SClCpBkI,QACW,cAA7Bf,OAAOL,SAASqB,UAEe,UAA7BhB,OAAOL,SAASqB,UAEhBhB,OAAOL,SAASqB,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9D,SAAS+D,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a38db768.chunk.js","sourcesContent":["//component that adds a task to the active driver during the active week\nimport React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { transaction } from 'mobx';\nimport { getDriverDay } from './DriverTimetable'; \n\nconst hoursRangeSelect = [];\nfor (let singleHour = 0; singleHour < 24; singleHour++) {\n  hoursRangeSelect.push(singleHour);\n}\n\nexport default ({ viewModel }) => {\n\n  const typeInput = React.useRef();\n  const locationInput = React.useRef();\n  const descriptionInput = React.useRef();\n  const daySelectInput = React.useRef();\n  const hourFromSelect = React.useRef();\n  const hourToSelect = React.useRef();\n\n  return (\n    <>\n      <select required className=\"form-control\" ref={typeInput} name=\"Task Type\">\n            <option>Select Task Type</option>\n            <option value=\"Pick-up\">Pick-Up</option>\n            <option value=\"Drop-off\">Drop-Off</option>\n            <option value=\"Other\">Other</option>\n      </select>\n      <select required className=\"form-control\" ref={daySelectInput} name=\"Day Selection\">\n            <option>Select Day</option>\n            <option value=\"0\">Monday</option>\n            <option value=\"1\">Tuesday</option>\n            <option value=\"2\">Wednesday</option>\n            <option value=\"3\">Thursday</option>\n            <option value=\"4\">Friday</option>\n            <option value=\"5\">Saturday</option>\n            <option value=\"6\">Sunday</option>\n      </select>\n      <select required className=\"form-control\" ref={hourFromSelect} name=\"Hour From\">\n            <option>From</option>\n            { hoursRangeSelect.map((i) => <option> {i}:00 </option> )}\n      </select>\n      <select required className=\"form-control\" ref={hourToSelect} name=\"Hour To\">\n            <option>To</option>\n            { hoursRangeSelect.map((i) => <option> {i}:00 </option> )}\n      </select>\n      <input required className=\"form-control\" ref={locationInput} name=\"location\" type=\"text\" placeholder=\"Location\" />\n      <input required className=\"form-control\" ref={descriptionInput} name=\"description\" type=\"text\" placeholder=\"Description\" />\n      <button style={{ width: 'inherit' }}className='btn btn-success' onClick={() => {\n        const type = typeInput.current.value;\n        if (!type) {\n          return alert('Please select Type first');\n        }\n        const location = locationInput.current.value;\n        const description = descriptionInput.current.value;\n        const day = daySelectInput.current.value;\n        const from = Number.parseInt(hourFromSelect.current.value);\n        const to = Number.parseInt(hourToSelect.current.value);\n\n        if (to < from ) {\n          return alert('Invalid time range!')\n        }\n\n        const driverDay = getDriverDay(viewModel, day);\n\n        const overlappedTasks = new Set();\n        for (let i = from; i <= to; i++) {\n          const ot = driverDay.hours[i];\n          if (ot) {\n            overlappedTasks.add(ot);\n          }\n        }\n\n        if (overlappedTasks.size) {\n          if (!window.confirm('Do you want to overwrite the existing tasks?')) {\n            return;\n          }\n        }\n\n        const taskId = uuid();\n        const newTask = {\n          id: taskId,\n          type,\n          location,\n          description,\n          driver: viewModel.activeDriver\n        };\n\n        transaction(() => {\n          viewModel.tasks.set(taskId, newTask);\n\n          if (overlappedTasks.size) {\n            for (let i = 0; i < 24; ++i) {\n              const t = driverDay.hours[i];\n              if (overlappedTasks.has(t)) {\n                driverDay.hours[i] = null;\n              }\n              if (i >= from && i <= to) {\n                driverDay.hours[i] = taskId;\n              }\n            }\n            const deleted = Array.from(overlappedTasks);\n            for (let toDelete of deleted) {\n              viewModel.tasks.delete(toDelete);\n            }\n          }\n          else {\n            for (let i = from; i <= to; i++) {\n              driverDay.hours[i] = taskId;\n            }\n          }\n          \n          \n        });\n      }}>Add new task</button>\n    </>\n  )\n}","// helper function that builds the year as 52 weeks -> 7 weeks -> 24 hours nested structure\nconst buildWeek = () => {\n  const days = [];\n  for (let i = 0; i < 7; ++i) {\n    days.push({\n      hours: new Array(24)\n    })\n  }\n  return days;\n}\n\nconst buildYear = () => {\n  const weeks = [];\n  for (let i = 0; i < 52; ++i) {\n    weeks.push({\n      days: buildWeek()\n    })\n  }\n  return weeks;\n}\n\nexport default buildYear;","// component that switches the active driver\nimport React from 'react';\nimport { observer } from 'mobx-react';\n\nexport default observer(({ viewModel }) => {\n  return (\n    <div>\n        <form>\n          <select className=\"form-control\" value={viewModel.activeDriver} name=\"Drivers\" id=\"Drivers\" onChange={(e) => {\n              const value = e.target.value; \n              viewModel.activeDriver = value;\n          }}>\n            { viewModel.drivers.map((driver, i) => <option key={`${driver}-${i}`} value={driver}>{driver}</option> ) }\n          </select>\n        </form>\n      </div>\n  );\n});\n","// component that switches the active week\nimport React from 'react';\nimport { observer } from 'mobx-react';\n\nexport default observer(({ viewModel }) => {\n  return (\n    <>\n      <button className='btn btn-primary' onClick={() => {\n        if(viewModel.activeWeek<1) {\n          return;\n        }\n        viewModel.activeWeek--\n      }}>\n        &#8592;\n      </button>\n      <label className='card-header'>Week {viewModel.activeWeek +1}</label>\n      <button className='btn btn-success' onClick={() => {\n        if(viewModel.activeWeek>52) {\n          return;\n        }\n        viewModel.activeWeek++\n      }}>\n        &#8594;\n      </button>\n    </>\n    )\n})","// component that renders the active driver's timetable\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { transaction } from 'mobx';\n\nexport const getDriverDay = (viewModel, day) => {\n  const { activeDriver, activeWeek, driverTimeline } = viewModel;\n  const currentDriverTimeline = driverTimeline[activeDriver];\n  if (!currentDriverTimeline) {\n    return;\n  }\n  return currentDriverTimeline[activeWeek].days[day];\n}\n\nconst getTaskByDayTime = (viewModel, day, hour) => {\n  const { tasks } = viewModel;\n  const taskId = getDriverDay(viewModel, day).hours[hour];\n  const task = tasks.get(taskId);\n  return task;\n}\n\nconst deleteTask = (viewModel, day, task) => {\n  const { id, driver } = task;\n  const hours = viewModel.driverTimeline[driver][viewModel.activeWeek].days[day].hours;\n  transaction(() => {\n    for (let i = 0; i < 24; ++i) {\n      if (hours[i] === id) {\n        hours[i] = null;\n      } \n    }\n    viewModel.tasks.delete(id);\n  });\n}\n\nexport default observer(({ viewModel }) => {\n  const rows = [];\n  const renderedTasks = {};\n  for (let hour = 0; hour < 25; hour++) {\n    const columns = [<td>{hour}:00</td>];\n    for (let day = 0; day < 7; day++) {\n      let task = getTaskByDayTime(viewModel, day, hour); \n      let deleteBtn = null;\n      if (!renderedTasks[task]) {\n        const _day = day;\n        const _task = task;\n        renderedTasks[task] = true;\n        deleteBtn = <button onClick={() => {\n          deleteTask(viewModel, _day, _task);\n        }}>delete</button>;\n      }\n      if (task) {\n        task = <div>{task.type} - {task.description} {deleteBtn}</div>\n      }\n\n      columns.push(<td>{task || '-'}</td>)\n    }\n    rows.push(<tr>\n      {columns}\n    </tr>)\n  }\n\n  return (\n    <div>\n      <table style={{ width: '100%' }}>\n        <tr>\n          <th></th>\n          <th>Monday</th>\n          <th>Tuesday</th>\n          <th>Wednesday</th>\n          <th>Thursday</th>\n          <th>Friday</th>\n          <th>Saturday</th>\n          <th>Sunday</th>\n        </tr>\n        {rows}\n      </table>\n    </div>\n  )\n})\n","// helper functionality that serves as the accumulator for data used in CSV generation\nclass AccumEntry {\n\n    constructor() {\n        this.records = {};\n        this.daysCount = 0;\n    }    \n\n    addDayRecord = (type, count) => {\n        if (!this.records[type]) {\n            this.records[type] = count;\n        } else {\n            this.records[type] += count;\n        }\n    }\n\n    closeDay = () => {\n        this.daysCount++;\n    }\n}\n\nexport class Accum {\n\n    constructor(period, types) {\n        this.period = period;\n        this.entries = [];\n        this.types = types;\n    }\n\n    addDayRecords = (all) => {\n        for (let record of all) {\n            this.__addDayRecordInternal(record.type, record.count);\n        }\n        this.entries[this.entries.length - 1].closeDay();\n    }\n\n    __addDayRecordInternal = (type, count) => {\n        let currentEntry;\n        if (!this.entries.length) {\n            currentEntry = new AccumEntry(); \n            this.entries.push(currentEntry);\n        } else {\n            currentEntry = this.entries[this.entries.length - 1];\n            if (currentEntry.daysCount === this.period) {\n                currentEntry = new AccumEntry(); \n                this.entries.push(currentEntry);\n            }\n        }\n        currentEntry.addDayRecord(type, count);\n    }\n\n    print = () => {\n        const rows = [];\n        const head = `Time-Frame,${this.types.join(',')}`;\n        rows.push(head);\n        let counter = 0 ;\n        for (let entry of this.entries) {\n            let row = `DAYS ${counter + 1} - ${counter + this.period},` + this.types.map(t => entry.records[t] || 0).map(v => ''+ v).join(',');\n            rows.push(row);\n            counter += this.period;\n        }\n        const report = rows.join('\\n');\n        return report;\n    }\n}","// component that generates a CSV file with the active driver's schedule\nimport React from 'react';\nimport { Accum } from '../helpers/reportAccum';\n\nconst taskTypes = [\"Pick-up\", \"Drop-off\", \"Other\"];\n\nconst createReport = (viewModel, period) => {\n  const accum = new Accum(period, taskTypes);\n  const { activeDriver, driverTimeline, tasks } = viewModel;\n  const driverYear = driverTimeline[activeDriver];\n  for (let i = 0; i < 52; i++) {\n    const week = driverYear[i];\n    const { days } = week;\n    for (let j = 0; j < 7; j++) {\n      const { hours } = days[j];\n      let allTasks = new Set();\n      for (let h = 0; h < 24; h++) {\n        const task = hours[h];\n        if (task) {\n          allTasks.add(task);\n        }\n      }\n      const map = new Map();\n      for (let taskType of taskTypes) {\n        map.set(taskType, { count: 0 });\n      }\n\n      if (allTasks.size) {\n        allTasks = Array.from(allTasks).map(id => tasks.get(id));\n        allTasks.forEach(t => {\n          map.get(t.type).count++;\n        });\n        \n      }\n      const dayRecords = Array.from(map.entries()).map(x => ({ type: x[0], count: x[1].count }));\n        accum.addDayRecords(dayRecords);\n    }\n  }\n  return accum.print();\n}\n\nconst downloadReport = (csvText) => {\n\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(csvText));\n  element.setAttribute('download', 'report.csv');\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n\n}\n\nexport default ({ viewModel }) => {\n  const scheduleInput = React.useRef();\n\n  return (\n    <>\n      <select className=\"form-control\" ref={scheduleInput} name=\"Schedule Input\">\n        <option value=\"2\">2 days</option>\n        <option value=\"4\">4 days</option>\n        <option value=\"7\">7 days</option>\n        <option value=\"14\">14 days</option>\n        <option value=\"28\">28 days</option>\n      </select>\n      <button className='btn btn-success' onClick={() => {\n          const period = Number.parseInt(scheduleInput.current.value);\n          const report = createReport(viewModel, period);\n          downloadReport(report);   \n      }}>\n        CSV\n      </button>\n    </>\n  )\n}","import React, { useRef } from 'react';\nimport { observable } from 'mobx';\nimport buildYear from './helpers/yearBuilder';\nimport './App.css';\nimport DriverSelector from './components/DriverSelector';\nimport WeekToggle from './components/WeekToggle';\nimport DriverTimeTable from './components/DriverTimetable';\nimport DriverScheduleCSV from './components/DriverScheduleCSV';\nimport AddDriverTask from './components/AddDriverTask';\n\nfunction App() {\n  // viewModel object stores the states of all app's components\n  const { current: viewModel } = useRef(observable({\n    drivers: [\"John\", \"Ben\", \"Ken\"],\n    tasks: new Map(),\n    activeDriver: \"John\",\n    driverTimeline: {\n      John: buildYear(),\n      Ben: buildYear(),\n      Ken: buildYear(),\n    },\n    activeWeek: 0\n  }));\n\n  return (\n    <div className=\"Page\">\n    <div className=\"Control-Panel\">\n    <div className=\"Driver-Schedule\">\n      <label className=\"card-header\">Driver:</label>\n      <DriverSelector viewModel={viewModel}></DriverSelector>\n      </div>\n      <div className=\"Week-Toggle\">\n        <WeekToggle viewModel={viewModel}></WeekToggle>\n      </div>\n\n      <div className=\"Download-Schedule\">\n        <DriverScheduleCSV viewModel={viewModel}></DriverScheduleCSV>\n      \n      </div>\n    </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <AddDriverTask viewModel={viewModel}></AddDriverTask>\n          </div>\n          <div className=\"col-9\">\n            <DriverTimeTable viewModel={viewModel}></DriverTimeTable>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}